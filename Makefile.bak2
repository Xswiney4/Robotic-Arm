# Compiler and flags
CC = g++
CFLAGS = -Wall -std=c++17 -Iinclude

# Check if we are on Windows
ifeq ($(OS),Windows_NT)
    # If on Windows, set appropriate compiler (MinGW)
    CC = g++.exe
    # Set Windows-specific paths and cleanup commands
    DEL = del /q
    RMDIR = rmdir /s /q
    MKDIR = if not exist "$(BUILD_DIR)" mkdir "$(BUILD_DIR)"
    EXEC = main.exe  # Windows executable file extension
    PATH_SEP = \\  # Windows uses backslashes
else
    # For Linux (Raspberry Pi) or other Unix-like systems
    DEL = rm -f
    RMDIR = rm -rf
    MKDIR = mkdir -p "$(BUILD_DIR)"
    EXEC = main  # Linux executable (no .exe)
    PATH_SEP = /  # Linux uses forward slashes
endif

# Directories
SRC_DIR = src
BUILD_DIR = build
TEST_DIR = test

# Source and object files
SRCS = $(wildcard $(SRC_DIR)/*.cpp)
OBJS = $(patsubst $(SRC_DIR)/%.cpp, $(BUILD_DIR)/%.o, $(SRCS))

# Output binary name
TARGET = $(EXEC)  # Output file is dependent on platform

# Ensure TESTNAME is set at the beginning
ifeq ($(TESTNAME),)
    $(info Running 'make clean' before error)
    $(MAKE) clean
    $(shell echo "TESTNAME is not set. Please specify the test file name with TESTNAME=testfile.cpp" && exit 1)
endif

# Default target: compile the main executable (including main.cpp)
all: $(TARGET)

# Linking the executable (including main.o)
$(TARGET): $(OBJS)
	$(CC) $(OBJS) -o $@

# Compiling object files from src directory
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.cpp
	$(MKDIR)
	$(CC) $(CFLAGS) -c $< -o $@

# Test target to compile the specified test file (excluding main.cpp)
test: 
	# Check if the test file exists
	@if [ ! -f $(TEST_DIR)/$(TESTNAME) ]; then \
	    echo "Running 'make clean' before error"; \
	    $(MAKE) clean; \
	    echo "TESTNAME $(TESTNAME) does not exist in $(TEST_DIR) directory" && exit 1; \
	fi

	# Ensure the build directory exists
	$(MKDIR)

	# Compiling object files from the specified test file (only the specified test file, not all in the test dir)
	$(BUILD_DIR)/$(TESTNAME:.cpp=.o): $(TEST_DIR)/$(TESTNAME)
		$(CC) $(CFLAGS) -c $< -o $@

	# Linking the object files (excluding main.o) and the test file
	$(CC) $(filter-out $(BUILD_DIR)/main.o, $(OBJS)) $(BUILD_DIR)/$(TESTNAME:.cpp=.o) -o $(EXEC)

# Cleaning build artifacts
clean:
ifeq ($(OS),Windows_NT)
	# Windows cleanup
	@if exist build $(DEL) build\* 
	@if exist build $(RMDIR) build
	@if exist $(EXEC) $(DEL) $(EXEC)
else
	# Linux cleanup
	rm -rf $(BUILD_DIR) $(EXEC)
endif

.PHONY: all clean test
